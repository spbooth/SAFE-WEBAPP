//| Copyright - The University of Edinburgh 2011                            |
//|                                                                         |
//| Licensed under the Apache License, Version 2.0 (the "License");         |
//| you may not use this file except in compliance with the License.        |
//| You may obtain a copy of the License at                                 |
//|                                                                         |
//|    http://www.apache.org/licenses/LICENSE-2.0                           |
//|                                                                         |
//| Unless required by applicable law or agreed to in writing, software     |
//| distributed under the License is distributed on an "AS IS" BASIS,       |
//| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.|
//| See the License for the specific language governing permissions and     |
//| limitations under the License.                                          |
/*******************************************************************************
 * Copyright (c) - The University of Edinburgh 2010
 *******************************************************************************/
package uk.ac.ed.epcc.webapp.forms.html;

import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import uk.ac.ed.epcc.webapp.AppContext;
import uk.ac.ed.epcc.webapp.content.HtmlBuilder;
import uk.ac.ed.epcc.webapp.content.HtmlPrinter;
import uk.ac.ed.epcc.webapp.forms.Identified;
import uk.ac.ed.epcc.webapp.forms.exceptions.ActionException;
import uk.ac.ed.epcc.webapp.forms.exceptions.FieldException;
import uk.ac.ed.epcc.webapp.forms.factory.DirectFormUpdate;
import uk.ac.ed.epcc.webapp.forms.factory.FormUpdate;
import uk.ac.ed.epcc.webapp.forms.factory.StandAloneFormUpdate;
import uk.ac.ed.epcc.webapp.forms.factory.UpdateForm;
import uk.ac.ed.epcc.webapp.forms.result.FormResult;


import uk.ac.ed.epcc.webapp.servlet.ServletService;
import uk.ac.ed.epcc.webapp.session.SessionService;

/**
 * Utility class to do standard Object update via a HTML Form, defaults to the
 * standard Forms generated by the FormUpdate object but these can be overridden
 * by calling the setForm and setObject/setSelectForm methods before invoking
 * the Form code
 * 
 * @author spb
 * @param <T> type of object being updated 
 * 
 */


public class HTMLUpdateForm<T> extends UpdateForm<T> {
	protected HTMLForm f = null;

	protected HTMLForm sf = null;

	/**
	 * create a HTMLUpdate form based on the factory
	 * 
	 * @param l
	 *            String name of Object type
	 * @param c
	 *            FormUpdate BasicDataObjectFactory for object
	 */
	public HTMLUpdateForm(String l, FormUpdate<T> c) {
		super(l, c);
	}

	private final HtmlBuilder getActionButtons(HtmlBuilder result,HttpServletRequest req) {
		HTMLForm f = getForm(req);
		return f.getActionButtons(result);
	}

	private HTMLForm getForm(HttpServletRequest req) {
		if (!haveTarget()) {
			String error_text="object not specified for HTMLUpdateForm ";
			AppContext c = getContext();
			
			c.error(error_text);
			
			return null;
		}
		if (f == null) {
			f = new HTMLForm(getContext());
			try {
				((StandAloneFormUpdate<T>) getFormUpdate()).buildUpdateForm(getTypeName(),f,getObject(),getContext().getService(SessionService.class));
			} catch (Exception e) {
				getContext().error(e, "Error building form");
				return null;
			}

		}
		return f;
	}

	/**
	 * get a complete update form rather than just the fields table.
	 * 
	 * @param req
	 *            HttpRequest
	 * @param res
	 *            HttpResponse
	 * @param post_url
	 *            URL to post to
	 * @param type
	 * @return String HTML fragment
	 */
	public final String getFullForm(HttpServletRequest req,
			HttpServletResponse res, String post_url, String type){
		return getFullForm(new HtmlBuilder(),req, res, post_url, type).toString();
	}
	public final HtmlBuilder getFullForm(HtmlBuilder result,HttpServletRequest req,
			HttpServletResponse res, String post_url, String type){

		if( getSelect(result,req, type)){
			return result;
		}
	

		Object target = getObject();
		if (target != null && target instanceof Identified) {
			Identified d = (Identified) target;
			result.open("h3");
			result.clean(d.getIdentifier());
			result.close();
		}
		result.open("h4");
			result.clean("object details:");
		result.close();
		result.open("form");
			result.attr("method","post");
			result.attr("action",res.encodeURL(req.getContextPath() + post_url));
			result.open("input",new String[][] {{"type","hidden"},
	    									{"name","action"},
	    									{"value","UPDATE_OBJECT"}});
			result.close();
			result.open("input",new String[][] {{"type","hidden"},
				{"name","type"},
				{"value",type}});
			result.close();
			result.open("input",new String[][] {{"type","hidden"},
				{"name","form_url"},
				{"value",HTMLForm.getFormURL(req)}});
			result.close();
			getSelectForm().getHiddenForm(result);
			result.open("input",new String[][] {{"type","hidden"},
				{"name","select"},
				{"value","yes"}});
			result.close();
			
			getHtmlFieldTable(result,req);
			
			getActionButtons(result,req);
		result.close();
		
		return result;
	}

	private final HtmlBuilder getHtmlFieldTable(HtmlBuilder result,HttpServletRequest req)  {
		HTMLForm f = getForm(req);
		if (f == null) {
			return result;
		}
		if (!HTMLForm.hasError(req)) {
			// should be the ininital show of the form
			// validate current state
			return f.getHtmlFieldTable(result);
		} else {
			// take values and errors from request
			return f.getHtmlFieldTable(result,req);
		}
	}

	/**
	 * Emit a form to select the object to edit
	 * 
	 * @param req
	 *            HttpServletRequest
	 * @param type
	 *            Form type
	 * @return a HTML fragment that contains a self targetted form to select the
	 *         Object or null if object already known
	 */
	private boolean getSelect(HtmlBuilder result, HttpServletRequest req, String type) {
		if (haveTarget()) {
			return false;
		}
		
		if (req.getParameter("select") == null) {
			// this is the initial show so supress markup
			// also don't try the initial parse as the form_url will be missing.
			// we can still implement click through links by defining the select parameter as well
			HTMLForm.clearErrors(req);
		}else{
			// this is a post parse the results
			// we also need to follow this route if it is a redisplay of the 
			// actual update form with errors so include a hidden select parameter
			// along with the hidden select form
			// when producng the update form.
			parseSelectForm(req);
		}

		if (!haveTarget()) {
			HTMLForm f = getSelectForm();
			// emit the form

			result.open("h3");
			result.clean("Select an object to modify:");
			result.close();
			result.open("form");
			result.attr("method","post" );
				result.open("input");
					result.attr("type","hidden");
					result.attr("name","type");
					result.attr("value",type);
				result.close();
				result.open("input");
					result.attr("type","hidden");
					result.attr("name","form_url");
					result.attr("value",HTMLForm.getFormURL(req));
				result.close();	
			
			f.getHtmlFieldTable(result, req);
			
			result.open("input");
				result.attr("class", "input_button");
				result.attr("type","submit");
				result.attr("name", "select");
				result.attr("value", " Select ");
			result.close();
			
			result.close(); // form
			return true;
		}
		return false;
	}

	private HTMLForm getSelectForm() {
		if (sf != null) {
			return sf;
		}
		sf = new HTMLForm(getContext());
		buildSelectForm(sf);
		return sf;
	}

	/**
	 * return actions tring if the action requires confirmation.
	 * 
	 * @param req
	 *            HttpServletRequest
	 * @return String for confirm dialog or null if not to conrfirm.
	 * @throws ActionException
	 */
	public String mustConfirm(HttpServletRequest req) throws ActionException {
		parseSelectForm(req);
		HTMLForm f = getForm(req);
		if (f == null || !haveTarget()) {
			return null;
		}
		AppContext conn = getContext();
		Map params = conn.getService(ServletService.class).getParams();
		return f.mustConfirm(params);

	}

	private void parseSelectForm(HttpServletRequest req)  {
		HTMLForm select_form = getSelectForm();
		if (select_form.parsePost(req)) {
			setObject(select_form);
		}
	}

	/**
	 * parse post parameters setting errors
	 * 
	 * @param req
	 * @return message tag to return or null on error
	 * @throws ActionException
	 * @throws FieldException
	 * 
	 */
	@SuppressWarnings("unchecked")
	public FormResult parseUpdateForm(HttpServletRequest req)
			throws FieldException, ActionException {
		// needed to get the object from the params
		parseSelectForm(req);
		if( !haveTarget()){
			// can't determine the  the 
			return null;
		}
		FormUpdate fu = getFormUpdate();
		if( fu instanceof DirectFormUpdate){
			DirectFormUpdate<T> tfu = (DirectFormUpdate<T>) fu;
			// Go to Transition
			return tfu.getNext(getObject());
		}
		
		HTMLForm f = getForm(req);
		if (f == null ) {
			return null;
		}

		if (f.parsePost(req)) {
			AppContext conn = getContext();
			Map<String,Object> params = conn.getService(ServletService.class).getParams();
			return  f.doAction(params);

		} else {
			return null;
		}

	}

	public void setForm(HTMLForm f) {
		this.f = f;
	}
}