//| Copyright - The University of Edinburgh 2011                            |
//|                                                                         |
//| Licensed under the Apache License, Version 2.0 (the "License");         |
//| you may not use this file except in compliance with the License.        |
//| You may obtain a copy of the License at                                 |
//|                                                                         |
//|    http://www.apache.org/licenses/LICENSE-2.0                           |
//|                                                                         |
//| Unless required by applicable law or agreed to in writing, software     |
//| distributed under the License is distributed on an "AS IS" BASIS,       |
//| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.|
//| See the License for the specific language governing permissions and     |
//| limitations under the License.                                          |
/*******************************************************************************
 * Copyright (c) - The University of Edinburgh 2010
 *******************************************************************************/
package uk.ac.ed.epcc.webapp.forms.inputs;

import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;

import uk.ac.ed.epcc.webapp.Indexed;
import uk.ac.ed.epcc.webapp.forms.Identified;
import uk.ac.ed.epcc.webapp.forms.exceptions.FieldException;
import uk.ac.ed.epcc.webapp.forms.exceptions.ParseException;
import uk.ac.ed.epcc.webapp.forms.exceptions.ValidateException;
/** Simple ListInput that gives a choice of items (parsed and returned as their String representation)
 * 
 * Optionally alternate string values/labels can be presented.
 * @author spb
 *
 * @param <T> type of item
 */


public class SetInput<T> extends ParseAbstractInput<String> implements ListInput<String, T> {
    private Map<String,T> data = new LinkedHashMap<String,T>();
    private Map<T,String> labels = new LinkedHashMap<T,String>();
    private Map<T,String> tags = new LinkedHashMap<T,String>();
    private boolean case_insensative=false;
    public SetInput(){
    	
    }
    
    public SetInput(Collection<T> items){
    	for(T item : items){
    		addChoice(item);
    	}
    }
    
    /** Add an item using the same String value for both
     * the label and the tab.
     * 
     * @param label  String value used as both value and label.
     * @param item   Item associated with the tag
     */
    public void addChoice(String label,T item){
    	addChoice(label, label, item);
    }
    /** Add an item to the set. Arbitrary tags/labels
     * can be associated with an item provided the tags are unique.
     * 
     * @param tag   key value generated by input
     * @param label test presented to the user
     * @param item  item associated with key.
     */
    public void addChoice(String tag,String label, T item) {
    	tag=mapTag(tag);
    	data.put(tag, item);
    	labels.put(item, label);
    	tags.put(item, tag);
    }
    /** add an item to the set using default rules for
     * tags and labels.
     * 
     * @param item
     */
    public void addChoice(T item){
    	if( item == null ){
    		return;
    	}
    	String label=item.toString();
    	String key= makeDefaultTag(item);
    	
    	if( item instanceof Identified){
    		label = ((Identified)item).getIdentifier();
    	}
    	addChoice(key, label, item);
    }
	public T getItembyValue(String value) {
		return data.get(value);
	}

	public Iterator<T> getItems() {
		return data.values().iterator();
	}

	public int getCount(){
		return data.size();
	}
	public String makeDefaultTag(T item) {
		if( item instanceof Indexed){
			return Integer.toString(((Indexed)item).getID());
		}
		if( item instanceof Identified){
			return ((Identified)item).getIdentifier();
		}
		// This assumes toString is consistent with equals.
		return item.toString();
	}
	public String getTagByItem(T item) {
		return tags.get(item);
	}

	public String getTagByValue(String value) {
		return mapTag(value);
	}

	public String getText(T item) {
		return labels.get(item);
	}

	public T getItem() {
		return getItembyValue(getValue());
	}

	public void setItem(T item) {
		setValue(getTagByItem(item));
	}
	public void parse(String v) throws ParseException {
		if (v == null) {
			setValue(null);
			return;
		}
		if (v.trim().length() == 0) {
			setValue(null);
			return;
		}
		v=mapTag(v);
		if( data.containsKey(v)){
			setValue(v);
			return;
		}
		throw new ParseException("Illegal value "+v);
		
	}

	@Override
	public <R> R accept(InputVisitor<R> vis) throws Exception {
		return vis.visitListInput(this);
	}

	@Override
	public void validate() throws FieldException {
		super.validate();
		String value = getValue();
		if( value != null && ! data.containsKey(value)){
			throw new ValidateException("Illegal choice "+value);
		}
	}

	/* (non-Javadoc)
	 * @see uk.ac.ed.epcc.webapp.forms.inputs.ListInput#isValid(java.lang.Object)
	 */
	@Override
	public boolean isValid(T item) {
		return data.values().contains(item);
	}

	private String mapTag(String tag) {
		if(tag == null) {
			return null;
		}
		if( case_insensative) {
			return tag.toLowerCase();
		}
		return tag;
	}

	/**
	 * @return the case_insensative
	 */
	public boolean isCaseInsensative() {
		return case_insensative;
	}

	/**
	 * @param case_insensative the case_insensative to set
	 */
	public void setCaseInsensative(boolean case_insensative) {
		this.case_insensative = case_insensative;
	}
	
}