//| Copyright - The University of Edinburgh 2011                            |
//|                                                                         |
//| Licensed under the Apache License, Version 2.0 (the "License");         |
//| you may not use this file except in compliance with the License.        |
//| You may obtain a copy of the License at                                 |
//|                                                                         |
//|    http://www.apache.org/licenses/LICENSE-2.0                           |
//|                                                                         |
//| Unless required by applicable law or agreed to in writing, software     |
//| distributed under the License is distributed on an "AS IS" BASIS,       |
//| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.|
//| See the License for the specific language governing permissions and     |
//| limitations under the License.                                          |
/*******************************************************************************
 * Copyright (c) - The University of Edinburgh 2010
 *******************************************************************************/
package uk.ac.ed.epcc.webapp.forms.factory;

import uk.ac.ed.epcc.webapp.AppContext;
import uk.ac.ed.epcc.webapp.model.data.forms.UpdateTransition;


/** An edit/update transition that used the {@link FormUpdate} generated by
 * a {@link FormUpdateProducer}. This is assumed to be a {@link StandAloneFormUpdate}.
 * The main difference from {@link StandAloneFormUpdateTransition} is that the creation of
 * the {@link StandAloneFormUpdate} is deferred.
 * 
 * @author Stephen Booth
 *@see StandAloneFormUpdateTransition
 *@see UpdateTransition
 * @param <X>
 */
public class StandAloneFormUpdateProducerTransition<X> extends
		EditTransition<X> {
	private final FormUpdateProducer<X> producer;
	public StandAloneFormUpdateProducerTransition(String type_name,FormUpdateProducer<X> producer){
		super(type_name);
		this.producer=producer;
	}
	@Override
	public StandAloneFormUpdate<X> getUpdate(AppContext c,X dat) {
	
		return (StandAloneFormUpdate<X>) producer.getFormUpdate(c);
	}
	public FormUpdateProducer<X> getFormUpdateProducer(){
		return producer;
	}

}