<!--| Copyright - The University of Edinburgh 2015                             |-->
<!--|                                                                          |-->
<!--| Licensed under the Apache License, Version 2.0 (the "License");          |-->
<!--| you may not use this file except in compliance with the License.         |-->
<!--| You may obtain a copy of the License at                                  |-->
<!--|                                                                          |-->
<!--|    http://www.apache.org/licenses/LICENSE-2.0                            |-->
<!--|                                                                          |-->
<!--| Unless required by applicable law or agreed to in writing, software      |-->
<!--| distributed under the License is distributed on an "AS IS" BASIS,        |-->
<!--| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. |-->
<!--| See the License for the specific language governing permissions and      |-->
<!--| limitations under the License.                                           |-->
<project name="Webapp JAR" default="all" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant" xmlns:jacoco="antlib:org.jacoco.ant">
	<property file="build.properties" />
	<property name="build.home" value="${basedir}/build" />
	<property name="test.home" value="${basedir}/test-classes" />
	<property name="work.home" value="${basedir}/work" />
	<property name="report.dir" value="${basedir}/report" />
	<property name="doc.dir" value="${basedir}/docs" />
	<property name="tomcat.home" value="/home/sbooth/tomcat/apache-tomcat-7.0.27" />
	<property name="umldoc.home" value="/scratch/yworks-uml-doclet-3.0_02-jdk1.5" />
	<property name="webapp.lib" value="lib/safe"/>
	<property name="webapp.testlib" value="tests/lib"/>
	<property name="ext-lib.dir" value="${basedir}/ext-lib"/>

	<property name="compile.debug" value="true" />
	<property name="compile.deprecation" value="false" />
	<property name="compile.optimize" value="true" />
	<property name="compile.target" value="1.7" />
	<property name="compile.source" value="1.7" />
	<property name="ant.headless" value="true" />
	<property name="db_name" value="" />
	<property name="db_username" value="" />
	<property name="db_password" value="" />
	<property name="coverage.dir" value="${basedir}/coverage" />
	<property name="src.dir" value="${basedir}/src/"/>
	<property name="class.dir" value="${build.home}/"/>

	<!-- ==== All Target ==== -->

	<target name="all" depends="clean,build-jar,build-test-jar" description="Clean build and dist, then compile." />

	<!-- ==== Clean Target ==== -->

	<target name="clean" description="Delete old build directories.">
		<delete file="jacoco.exec"/>
		<delete dir="${report.dir}" />
		<delete dir="${test.home}" />
		<delete dir="${build.home}" />
		<delete dir="${work.home}" />
		<delete file="${webapp.lib}/webapp.jar" />
		<delete file="${webapp.testlib}/webapp-test.jar" />
		<delete dir="${coverage.dir}" />
	</target>
	<path id="lib.classpath">
		<fileset dir="${ext-lib.dir}">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${tomcat.home}/lib">
			<include name="*.jar" />
		</fileset>
	</path>
	<path id="compile.classpath">
		<path refid="lib.classpath" />
		<pathelement location="${build.home}" />
	</path>
	<path id="test.classpath">
		<path refid="lib.classpath" />
		<pathelement location="${build.home}" />
		<pathelement location="${test.home}" />
		<!-- to find the test.properties -->
		<pathelement location="${basedir}/tests" />
		<!-- pick up the Mock email settings -->
		<pathelement location="${basedir}/test_settings" />
	</path>


	<!-- Resolves dependencies defined in the ivy.xml file. -->
	<target name="ivy-resolve" description="retrieves dependencies with ivy and copies them to ${ext-lib.dir}">
		<ivy:retrieve pattern="${ext-lib.dir}/[artifact]-[revision](-[classifier]).[ext]" />
	</target>

	<!-- ==== Compilation Target ==== -->

	<target name="compile" depends="ivy-resolve" description="Compile Java">
		<mkdir dir="${build.home}" />
		<javac srcdir="${basedir}/src" destdir="${build.home}" debug="${compile.debug}" source="${compile.source}" target="${compile.target}" deprecation="${compile.deprecation}" optimize="${compile.optimize}">
			<classpath refid="compile.classpath" />
		</javac>
		<copy todir="${build.home}" verbose="true" overwrite="true">
			<fileset dir="${basedir}/src">
				<filename name="**/*.properties" />
			</fileset>
		</copy>
		<copy todir="${build.home}/META-INF" verbose="true" overwrite="true">
			<fileset dir="${basedir}/META-INF">
				<filename name="**/*.*" />
			</fileset>
		</copy>
	</target>
	<target name="compile-test" depends="compile" description="Compile Tests">
		<mkdir dir="${test.home}" />
		<javac srcdir="${basedir}/tests" destdir="${test.home}" debug="${compile.debug}" source="${compile.source}" target="${compile.target}" deprecation="${compile.deprecation}" optimize="${compile.optimize}">
			<classpath refid="test.classpath" />
		</javac>
	</target>

	<target name="build-jar" depends="compile" description="Create a JAR file from the current build.">
		<delete file="${webapp.lib}/webapp.jar" />
		<jar destfile="${webapp.lib}/webapp.jar" basedir="${build.home}" />
	</target>
	<target name="build-test-jar" depends="compile-test" description="Create a JAR file of tests from the current build.">
		<delete file="${webapp.testlib}/webapp-test.jar" />
		<jar destfile="${webapp.testlib}/webapp-test.jar">
			<fileset dir="${test.home}" />
			<fileset dir="${basedir}/test_settings"/>
		</jar>
	</target>

	<target name="junit" depends="compile-test" description="Runs Junit tests">
		<delete dir="${report.dir}" />
		<mkdir dir="${report.dir}" />
		<junit fork="yes" printsummary="on" showoutput="yes" forkMode="perBatch">
			<sysproperty key="java.awt.headless"
			value="${ant.headless}" />
			<!-- This is to allow database connection params to be overidden from command line -->
			<sysproperty key="db_name"
						value="${db_name}" />
			<sysproperty key="db_username"
						value="${db_username}" />
			<sysproperty key="db_password"
						value="${db_password}" />
			<classpath refid="test.classpath"/>
			<formatter type="xml"/>
			<batchtest skipNonTests="true" fork="no" todir="${report.dir}" >
				<fileset dir="${test.home}" >
					<include name="**/*.class" />
				</fileset>
			</batchtest>
		</junit>
		<junitreport todir="${report.dir}">
			<fileset dir="${report.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<report todir="${report.dir}" />
		</junitreport>
	</target>

	<target name="coverage" depends="compile-test">
		<echo>
		Database name ${db_name}
		Database user ${db_username}
		</echo>
		<delete dir="${report.dir}" />
		<mkdir dir="${report.dir}" />
		<delete dir="${coverage.dir}" />
		<mkdir dir="${coverage.dir}" />
		<jacoco:coverage>
			<junit fork="yes" printsummary="on" showoutput="yes"   >
				<sysproperty key="java.awt.headless"
				value="${ant.headless}" />
				<!-- This is to allow database connection params to be overidden from command line -->
				<sysproperty key="db_name"
								value="${db_name}" />
				<sysproperty key="db_username"
								value="${db_username}" />
				<sysproperty key="db_password"
								value="${db_password}" />
				<classpath refid="test.classpath"/>
				<formatter type="xml"/>
				<batchtest skipNonTests="true"  todir="${report.dir}">
					<fileset dir="${test.home}" >
						<include name="**/*.class" />
					</fileset>
				</batchtest>
			</junit>
		</jacoco:coverage>
		<junitreport todir="${report.dir}">
			<fileset dir="${report.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<report todir="${report.dir}" />
		</junitreport>
	</target>
	<target name="jacoco-report" depends="coverage">
		<jacoco:report>
			<executiondata>
				<file file="jacoco.exec"/>
			</executiondata>
			<structure name="WEBAPP-JAR">
				<classfiles>
					<fileset dir="${build.home}"/>
					<fileset dir="${test.home}"/>
				</classfiles>
				<sourcefiles>
					<fileset dir="${src.dir}"/>
					<fileset dir="${basedir}/tests"/>
				</sourcefiles>
			</structure>

			<html destdir="${coverage.dir}"/>
		</jacoco:report>
	</target>

	<target name="ydoc" depends="compile">
		<property name="ps" value="${path.separator}"/>
		<delete dir="${doc.dir}" />
		<mkdir dir="${doc.dir}/api" />
		<javadoc
            source="${compile.source}"
            destdir="${doc.dir}/api"
            additionalparam="-breakiterator">
			<packageset dir="${basedir}/src">
				<include name="uk/ac/ed/epcc/webapp/**"/>
			</packageset>
			<classpath refid="compile.classpath" />
			<doclet
                name="ydoc.doclets.YStandard"
                path="${umldoc.home}/lib/ydoc.jar${ps}${umldoc.home}/resources${ps}${build.home}">
				<param name="-author"/>
				<param name="-generic"/>
				<param name="-umlpackagegen"/>
				<param name="-umltypegen"/>
				<param name="-filterpath" value="${umldoc.home}/lib/ydoc.jar"/>
				<param name="-filter"     value="ydoc.filters.ExcludeFilter"/>
				<param name="-tag" value="y.precondition"/>
				<param name="-tag" value="y.postcondition"/>
				<param name="-tag" value="y.complexity"/>
				<param name="-tag" value="param"/>
				<param name="-tag" value="return"/>
				<param name="-tag" value="see"/>
				<param name="-tag" value="y.uml"/>
			</doclet>
		</javadoc>
	</target>

</project>
